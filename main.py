import os
import asyncio
import sqlite3
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("TOKEN")
BOT_NAME = os.getenv("BOT_NAME", "tvoyanapominalka_bot")
DB_FILE = "reminders.db"

if not TOKEN:
    print("ERROR: TOKEN environment variable is not set. Set TOKEN in Render (or .env) and restart.")
    raise SystemExit(1)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS reminders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id INTEGER,
                    text TEXT,
                    remind_time TEXT
                )""")
    conn.commit()
    conn.close()

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
def add_reminder(chat_id, text, remind_time):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("INSERT INTO reminders (chat_id, text, remind_time) VALUES (?, ?, ?)",
              (chat_id, text, remind_time.isoformat()))
    conn.commit()
    conn.close()

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_user_reminders(chat_id):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT id, text, remind_time FROM reminders WHERE chat_id=?", (chat_id,))
    rows = c.fetchall()
    conn.close()
    return rows

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏) ---
def get_all_reminders():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT id, chat_id, text, remind_time FROM reminders")
    rows = c.fetchall()
    conn.close()
    return rows

# --- –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
def delete_reminder(reminder_id):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("DELETE FROM reminders WHERE id=?", (reminder_id,))
    conn.commit()
    conn.close()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        f"–ü—Ä–∏–≤–µ—Ç! –Ø @{BOT_NAME} ‚Äî —Ç–≤–æ—è –ø—Ä–æ—Å—Ç–∞—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä: /remind 10m –≤—ã–ø–∏—Ç—å –≤–æ–¥—É –∏–ª–∏ /remind 18:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å)\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/cancel <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID\n"
    )
    await update.message.reply_text(msg)

# --- –ö–æ–º–∞–Ω–¥–∞ /remind ---
async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>\n–ü—Ä–∏–º–µ—Ä: /remind 10m –≤—ã–ø–∏—Ç—å –≤–æ–¥—É")
        return

    time_str = context.args[0]
    text = " ".join(context.args[1:])

    try:
        # –ü—Ä–∏–º–µ—Ä: "10m" –∏–ª–∏ "18:30"
        if time_str.endswith("m") and time_str[:-1].isdigit():
            minutes = int(time_str[:-1])
            remind_time = datetime.now() + timedelta(minutes=minutes)
        else:
            target_time = datetime.strptime(time_str, "%H:%M").time()
            now = datetime.now()
            remind_time = datetime.combine(now.date(), target_time)
            if remind_time < now:
                remind_time += timedelta(days=1)
    except Exception:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π '10m' –∏–ª–∏ 'HH:MM' (–Ω–∞–ø—Ä–∏–º–µ—Ä 18:30).")
        return

    add_reminder(update.effective_chat.id, text, remind_time)
    await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_time.strftime('%H:%M %d.%m.%Y')} ‚Äî '{text}'")

# --- –ö–æ–º–∞–Ω–¥–∞ /list ---
async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reminders = get_user_reminders(update.effective_chat.id)
    if not reminders:
        await update.message.reply_text("üîπ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    msg_lines = ["üìÖ –¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"]
    for r in reminders:
        reminder_id, text, remind_time = r
        try:
            time_str = datetime.fromisoformat(remind_time).strftime("%H:%M %d.%m.%Y")
        except Exception:
            time_str = remind_time
        msg_lines.append(f"üÜî {reminder_id}: {text} ‚Äî ‚è∞ {time_str}")
    await update.message.reply_text("\n".join(msg_lines))

# --- –ö–æ–º–∞–Ω–¥–∞ /cancel ---
async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1 or not context.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /cancel <id>")
        return

    reminder_id = int(context.args[0])
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —ç—Ç–æ–º—É —á–∞—Ç—É
    user_reminders = [r[0] for r in get_user_reminders(update.effective_chat.id)]
    if reminder_id not in user_reminders:
        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É —Ç–µ–±—è.")
        return

    delete_reminder(reminder_id)
    await update.message.reply_text(f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} —É–¥–∞–ª–µ–Ω–æ.")

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def reminder_checker(app):
    await asyncio.sleep(1)  # –¥–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞—Ä—Ç
    while True:
        reminders = get_all_reminders()
        now = datetime.now()
        for r in reminders:
            reminder_id, chat_id, text, remind_time_str = r
            try:
                remind_time = datetime.fromisoformat(remind_time_str)
            except Exception:
                # –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
                delete_reminder(reminder_id)
                continue
            if now >= remind_time:
                try:
                    await app.bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e)
                delete_reminder(reminder_id)
        await asyncio.sleep(5)

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
async def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("remind", remind_command))
    app.add_handler(CommandHandler("list", list_command))
    app.add_handler(CommandHandler("cancel", cancel_command))

    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    asyncio.create_task(reminder_checker(app))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await app.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError:
        # –ï—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω (—Ä–µ–¥–∫–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        loop = asyncio.get_event_loop()
        loop.create_task(main())
        loop.run_forever()